select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
table(hospitals_final$medical_condition)
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Arthritis") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Asthma") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Diabetes") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Hypertension") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
obesity <- hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Obesity") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
ui <- dashboardPage(
dashboardHeader(title = "Best Hospitals for Care"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Table Settings", width = 3,
selectInput("medical_condition", "Select Condition", choices = c("Arthritis", "Asthma", "Cancer", "Diabetes", "Hypertension", "Obesity"),
selected = "Cancer"),
selectInput("insurance_provider", "Select Insurance Provider", choices = c("Aetna", "Blue Cross", "Cigna", "Medicare", "UnitedHealthcare"),
selected = "Medicare")
),
box(
title = "Top 5 Hospitals",
width = 7,
dataTableOutput("table")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# Define top5 as a reactive expression
top5 <- reactive({
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into = "length_of_stay", sep = " ") %>%
mutate(length_of_stay = as.numeric(length_of_stay)) %>%
mutate(hospital_quality = log10(length_of_stay * billing_amount))
})
output$table <- renderDataTable({
data <- top5()
# Filter the data based on selected medical_condition
data <- data[data$medical_condition == input$medical_condition,]
# Filter the data based on selected insurance provider
data <- data[data$insurance_provider == input$insurance_provider,]
# Select top five hospitals based on hospital_quality
data <- data %>%
arrange(hospital_quality) %>%
head(5) %>%
select(hospital, hospital_quality, admission_type, medical_condition)
# Return the filtered data for rendering in the DataTable
data
})
}
shinyApp(ui, server)
hospitals_location <- read_csv("data/hospital_locations.csv") %>%
clean_names()
library(sf)
#install.packages("leaflet")
library(leaflet)
#install.packages("leaflet")
library(leaflet)
ui <- dashboardPage(
dashboardHeader(title = "Best Hospitals Around You"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Filter Options", width = 3, solidHeader = TRUE, status = "primary",
selectInput("medical_condition", "Medical Condition", choices = c("Arthritis", "Asthma", "Cancer", "Diabetes", "Hypertension", "Obesity"),
selected = "All"),
selectInput("insurance_provider", "Insurance Provider", choices = c( "Aetna", "Blue Cross", "Cigna", "Medicare", "UnitedHealthcare"),
selected = "All")
),
box(
title = "Top 5 Hospitals",
width = 9,
status = "info",
dataTableOutput("table")
)
),
fluidRow(
box(
title = "Matched Hospitals",
width = 12,
solidHeader = TRUE, status = "warning",
dataTableOutput("matched_hospitals_table")
)
),
fluidRow(
box(
title = "Map of Matched Hospitals",
width = 12,
status = "success",
leafletOutput("map_plot")
)
)
)
)
# Server logic
server <- function(input, output, session) {
# Define top5 as a reactive expression
top5 <- reactive({
filtered_data <- hospitals_final %>%
filter(if (input$medical_condition != "All") medical_condition == input$medical_condition else TRUE,
if (input$insurance_provider != "All") insurance_provider == input$insurance_provider else TRUE)
top_hospitals <- filtered_data %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into = "length_of_stay", sep = " ") %>%
mutate(length_of_stay = as.numeric(length_of_stay)) %>%
mutate(hospital_quality = log10(length_of_stay * billing_amount)) %>%
arrange(hospital_quality) %>%
head(5) %>%
select(hospital, hospital_quality, admission_type, medical_condition)
top_hospitals
})
# Render top 5 hospitals table
output$table <- renderDataTable({
data <- top5()
data
})
# Define the reactive function to find matched hospitals
matched_hospitals <- reactive({
top_hospitals <- top5()
combined_results <- lapply(top_hospitals$hospital, function(hosp) {
w <- strsplit(hosp, " ")[[1]][1]
w <- gsub("[^[:alnum:]]", " ", w)
hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")]
})
result <- do.call(rbind, combined_results)
result
})
# Render the matched hospitals datatable
output$matched_hospitals_table <- renderDataTable({
matched_hospitals()
})
# Render the map of matched hospitals
output$map_plot <- renderLeaflet({
result <- matched_hospitals()
leaflet(result) %>%
addTiles() %>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = ~name
)
})
}
# Run the application
shinyApp(ui, server)
hospitals_location <- read_csv("data/hospital_locations.csv") %>%
clean_names()
hospitals_location <- hospitals_location[, c("index", "id", "name", "address", "city", "state", "zip", "type", "status", "latitude", "longitude", "website")] %>%
mutate(website = na_if(website, "NOT AVAILABLE"))
x <- hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Hypertension") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5)
for(i in 1:nrow(x)) {
row <- x[i,]
print(strsplit(row$hospital, " ")[1][[1]][1])
}
for(i in 1:nrow(x)) {
row <- x[i,]
w <- strsplit(row$hospital, " ")[[1]][1]
w <- str_replace_all(w, "[^[:alnum:]]", " ")
print(hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")])
}
combined_results <- list()
for(i in 1:nrow(x)) {
row <- x[i,]
w <- strsplit(row$hospital, " ")[[1]][1]
w <- str_replace_all(w, "[^[:alnum:]]", " ")
# Append each subset to the list
combined_results[[i]] <- hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")]
}
# Combine all the subsets into a single dataframe
result <- do.call(rbind, combined_results)
result
result1 <- hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into="length_of_stay", sep = " ") %>%
mutate(length_of_stay=as.numeric(length_of_stay)) %>%
mutate(hospital_quality=log10(length_of_stay*billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition=="Hypertension") %>%
select(hospital, hospital_quality, admission_type, medical_condition) %>%
head(5) %>%
rowwise() %>%
mutate(
w = strsplit(hospital, " ")[[1]][1],
w = str_replace_all(w, "[^[:alnum:]]", " "),
combined_results = list(hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")])
) %>%
pull(combined_results) %>%
do.call(rbind, .)
result1
ui <- dashboardPage(
dashboardHeader(title = "Best Hospitals for Care"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Table Settings", width = 3,
selectInput("medical_condition", "Select Condition", choices = c("Arthritis", "Asthma", "Cancer", "Diabetes", "Hypertension", "Obesity"),
selected = "Cancer"),
selectInput("insurance_provider", "Select Insurance Provider", choices = c("Aetna", "Blue Cross", "Cigna", "Medicare", "UnitedHealthcare"),
selected = "Medicare")
),
box(
title = "Top 5 Hospitals",
width = 7,
dataTableOutput("table")
)
),
fluidRow(
box(
title = "Matched Hospitals",
width = 12,
dataTableOutput("matched_hospitals_table")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# Define top5 as a reactive expression
top5 <- reactive({
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into = "length_of_stay", sep = " ") %>%
mutate(length_of_stay = as.numeric(length_of_stay)) %>%
mutate(hospital_quality = log10(length_of_stay * billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition == input$medical_condition,
insurance_provider == input$insurance_provider) %>%
head(5) %>%
select(hospital, hospital_quality, admission_type, medical_condition)
})
output$table <- renderDataTable({
data <- top5()
# Return the filtered data for rendering in the DataTable
data
})
# Define the reactive function to find matches from the other dataset
matched_hospitals <- reactive({
x <- top5()  # Use the same filtering logic as top5 reactive
combined_results <- list()
# Loop through each hospital in the filtered dataset
for(i in 1:nrow(x)) {
row <- x[i,]
w <- strsplit(row$hospital, " ")[[1]][1]
w <- str_replace_all(w, "[^[:alnum:]]", " ")
# Append each subset to the list
combined_results[[i]] <- hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")]
}
# Combine all the subsets into a single dataframe
result <- do.call(rbind, combined_results)
result
})
# Render the matched hospitals datatable
output$matched_hospitals_table <- renderDataTable({
matched_hospitals()
})
}
# Run the application
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Best Hospitals for Care"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Table Settings", width = 3,
selectInput("medical_condition", "Select Condition", choices = c("Arthritis", "Asthma", "Cancer", "Diabetes", "Hypertension", "Obesity"),
selected = "Cancer"),
selectInput("insurance_provider", "Select Insurance Provider", choices = c("Aetna", "Blue Cross", "Cigna", "Medicare", "UnitedHealthcare"),
selected = "Medicare")
),
box(
title = "Top 5 Hospitals",
width = 7,
dataTableOutput("table")
)
),
fluidRow(
box(
title = "Matched Hospitals",
width = 12,
dataTableOutput("matched_hospitals_table")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# Define top5 as a reactive expression
top5 <- reactive({
hospitals_final %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into = "length_of_stay", sep = " ") %>%
mutate(length_of_stay = as.numeric(length_of_stay)) %>%
mutate(hospital_quality = log10(length_of_stay * billing_amount)) %>%
arrange(hospital_quality) %>%
filter(medical_condition == input$medical_condition,
insurance_provider == input$insurance_provider) %>%
head(5) %>%
select(hospital, hospital_quality, admission_type, medical_condition)
})
output$table <- renderDataTable({
data <- top5()
# Return the filtered data for rendering in the DataTable
data
})
# Define the reactive function to find matches from the other dataset
matched_hospitals <- reactive({
x <- top5()  # Use the same filtering logic as top5 reactive
combined_results <- list()
# Loop through each hospital in the filtered dataset
for(i in 1:nrow(x)) {
row <- x[i,]
w <- strsplit(row$hospital, " ")[[1]][1]
w <- str_replace_all(w, "[^[:alnum:]]", " ")
# Append each subset to the list
combined_results[[i]] <- hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")]
}
# Combine all the subsets into a single dataframe
result <- do.call(rbind, combined_results)
result
})
# Render the matched hospitals datatable
output$matched_hospitals_table <- renderDataTable({
matched_hospitals()
})
}
# Run the application
shinyApp(ui, server)
library(ggmap)
register_stadiamaps("d67f62a2-bd90-430c-a40a-9ad6e095b888", write = FALSE)
result %>%
select(longitude, latitude) %>%
summary()
ui <- dashboardPage(
dashboardHeader(title = "Best Hospitals Around You"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Filter Options", width = 3, solidHeader = TRUE, status = "primary",
selectInput("medical_condition", "Medical Condition", choices = c("Arthritis", "Asthma", "Cancer", "Diabetes", "Hypertension", "Obesity"),
selected = "All"),
selectInput("insurance_provider", "Insurance Provider", choices = c( "Aetna", "Blue Cross", "Cigna", "Medicare", "UnitedHealthcare"),
selected = "All")
),
box(
title = "Top 5 Hospitals",
width = 9,
status = "info",
dataTableOutput("table")
)
),
fluidRow(
box(
title = "Matched Hospitals",
width = 12,
solidHeader = TRUE, status = "warning",
dataTableOutput("matched_hospitals_table")
)
),
fluidRow(
box(
title = "Map of Matched Hospitals",
width = 12,
status = "success",
leafletOutput("map_plot")
)
)
)
)
# Server logic
server <- function(input, output, session) {
# Define top5 as a reactive expression
top5 <- reactive({
filtered_data <- hospitals_final %>%
filter(if (input$medical_condition != "All") medical_condition == input$medical_condition else TRUE,
if (input$insurance_provider != "All") insurance_provider == input$insurance_provider else TRUE)
top_hospitals <- filtered_data %>%
mutate(discharge_date = as.Date(discharge_date),
date_of_admission = as.Date(date_of_admission),
time_spent = discharge_date - date_of_admission) %>%
filter(!is.na(time_spent)) %>%
separate(time_spent, into = "length_of_stay", sep = " ") %>%
mutate(length_of_stay = as.numeric(length_of_stay)) %>%
mutate(hospital_quality = log10(length_of_stay * billing_amount)) %>%
arrange(hospital_quality) %>%
head(5) %>%
select(hospital, hospital_quality, admission_type, medical_condition)
top_hospitals
})
# Render top 5 hospitals table
output$table <- renderDataTable({
data <- top5()
data
})
# Define the reactive function to find matched hospitals
matched_hospitals <- reactive({
top_hospitals <- top5()
combined_results <- lapply(top_hospitals$hospital, function(hosp) {
w <- strsplit(hosp, " ")[[1]][1]
w <- gsub("[^[:alnum:]]", " ", w)
hospitals_location[grep(w, tolower(hospitals_location$name), ignore.case = TRUE), c("name", "zip", "latitude", "longitude")]
})
result <- do.call(rbind, combined_results)
result
})
# Render the matched hospitals datatable
output$matched_hospitals_table <- renderDataTable({
matched_hospitals()
})
# Render the map of matched hospitals
output$map_plot <- renderLeaflet({
result <- matched_hospitals()
leaflet(result) %>%
addTiles() %>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = ~name
)
})
}
# Run the application
shinyApp(ui, server)
